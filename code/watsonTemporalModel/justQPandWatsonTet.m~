clear all;
close all;

stimParams = logspace(.1,2,100); % 100 logarithmically equally
                                 % spaced points between 10^.1 and 10^2
                                 
                                 

questData = qpInitialize('stimParamsDomainList',{stimParams},...
'psiParamsDomainList',{.001:.001:.012,.5:.5:2,.5:.5:5,.5:.5:3},...
'qpPF',@qpWatsonTemporalModel,...
'nOutcomes',21);


outcomes = 1:21;


%% Adjust these parameters and run the script. 
watsonParams = [.004 2 1 1];

nTrials = 24;
sdNoise = 50; % Noise moves around the index for freqIdxInSupport (the x-axis, rather than the y-axis).

maxPost = zeros(nTrials,1);
paramGuesses = zeros(nTrials,length(watsonParams));

guessRange = 
%% 
for i = 1:nTrials
    stim = qpQuery(questData);
    
    yGuess = watsonTemporalModel(stim,watsonParams) + randn*sdNoise;
    
    
    outcome = outcomes(idx);
    questData = qpUpdate(questData,stim,outcome);
    
    [maxPost(i),maxIndex] = max(questData.posterior);
    paramGuesses(i,:) = questData.psiParamsDomain(maxIndex,:);
    

end



freqSupport = 0:.01:64;

figure; hold on;
plot(freqSupport,watsonTemporalModel(freqSupport,watsonParams),'.k');
for j = 1:size(paramGuesses,1)
    a(j,:) = watsonTemporalModel((freqSupport),paramGuesses(j,:));
    plot(freqSupport,a(j,:));
end

